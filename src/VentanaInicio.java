import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

public class VentanaInicio extends javax.swing.JFrame 
{
    GestorConexion gestor = new GestorConexion();
    VentanaEdicion ventana = new VentanaEdicion(this, true);
    DefaultTableModel modelo;   
    int ncampos;
    int posicion = 0;
    String [] tcampos;
    String [] valores;
    public VentanaInicio() 
    {
        initComponents();  
        panelContenedor.setVisible(false);//Escondo el panel para luego poder abrirlo
        desactivar(false);
        
        //Personalización app
        botonConexion.setBackground(Color.red);
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.black);
        this.setIconImage(new ImageIcon(getClass().getResource("/resources/bbdd.png")).getImage());
        JTableHeader header = tablaDatos.getTableHeader();
        header.setForeground(Color.white);
        header.setBackground(Color.black);
        jScrollPane1.getViewport().setBackground(Color.white);
        
        eleccionTabla.addActionListener(new ActionListener() //Cuando el usuario selecciona otra tabla se actualizan los datos de la app
        {
            public void actionPerformed(ActionEvent e) 
            {
                desactivar(false);
                actualizaValores();
                desactivar(true);
            }
        });
        eleccionCampo2.addActionListener(new ActionListener()//Cuando el usuario selecciona otro campo se actualizan los valores a introducir
        {
            public void actionPerformed(ActionEvent e) 
            {
                if(eleccionCampo2.isEnabled())
                {
                    actualizaEleccion();
                }
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonConexion = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        eleccionCampo2 = new javax.swing.JComboBox<>();
        textoDato2 = new javax.swing.JTextField();
        botonModificar = new javax.swing.JButton();
        eleccionValor = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        botonBorrar = new javax.swing.JButton();
        eleccionCampo = new javax.swing.JComboBox<>();
        respuestaConsulta = new javax.swing.JTextField();
        botonConsulta = new javax.swing.JButton();
        eleccionTabla = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDatos = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        panelContenedor = new javax.swing.JPanel();
        botonSiguiente2 = new javax.swing.JButton();
        botonSiguiente = new javax.swing.JButton();
        textoDato = new javax.swing.JTextField();
        labelCampo = new javax.swing.JLabel();
        botonAñadir = new javax.swing.JButton();
        eleccionOperacion = new javax.swing.JComboBox<>();
        botonEdicion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestor BBDD");
        setBackground(new java.awt.Color(0, 0, 0));

        botonConexion.setBackground(new java.awt.Color(153, 0, 0));
        botonConexion.setFont(new java.awt.Font("Yu Gothic UI", 1, 18)); // NOI18N
        botonConexion.setForeground(new java.awt.Color(255, 204, 204));
        botonConexion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        botonConexion.setFocusPainted(false);
        botonConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConexionActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        eleccionCampo2.setBackground(new java.awt.Color(0, 0, 0));
        eleccionCampo2.setForeground(new java.awt.Color(255, 255, 255));
        eleccionCampo2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eleccionCampo2.setFocusable(false);

        textoDato2.setBackground(new java.awt.Color(0, 0, 0));
        textoDato2.setForeground(new java.awt.Color(255, 255, 255));
        textoDato2.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        botonModificar.setBackground(new java.awt.Color(0, 0, 0));
        botonModificar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botonModificar.setForeground(new java.awt.Color(255, 255, 255));
        botonModificar.setText("Modificar");
        botonModificar.setFocusPainted(false);
        botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarActionPerformed(evt);
            }
        });

        eleccionValor.setBackground(new java.awt.Color(0, 0, 0));
        eleccionValor.setForeground(new java.awt.Color(255, 255, 255));
        eleccionValor.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eleccionValor.setFocusable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setText("*Si no insertas nada en un campo no obligatorio, este se eliminará");
        jLabel1.setAutoscrolls(true);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel2.setText("*El formato de las fechas es: YYYY-MM-DD");
        jLabel2.setAutoscrolls(true);

        botonBorrar.setBackground(new java.awt.Color(0, 0, 0));
        botonBorrar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botonBorrar.setForeground(new java.awt.Color(255, 255, 255));
        botonBorrar.setText("Borrar");
        botonBorrar.setFocusPainted(false);
        botonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(eleccionCampo2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eleccionValor, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoDato2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eleccionCampo2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eleccionValor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoDato2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(botonBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(botonModificar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        eleccionCampo.setBackground(new java.awt.Color(0, 0, 0));
        eleccionCampo.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        eleccionCampo.setForeground(new java.awt.Color(255, 255, 255));
        eleccionCampo.setFocusable(false);

        respuestaConsulta.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        respuestaConsulta.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        botonConsulta.setBackground(new java.awt.Color(0, 0, 0));
        botonConsulta.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        botonConsulta.setForeground(new java.awt.Color(255, 255, 255));
        botonConsulta.setText("->");
        botonConsulta.setFocusPainted(false);
        botonConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConsultaActionPerformed(evt);
            }
        });

        eleccionTabla.setBackground(new java.awt.Color(0, 0, 0));
        eleccionTabla.setForeground(new java.awt.Color(255, 255, 255));
        eleccionTabla.setFocusable(false);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        tablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaDatos.setGridColor(new java.awt.Color(0, 0, 0));
        tablaDatos.setSelectionBackground(new java.awt.Color(153, 153, 153));
        tablaDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaDatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaDatos);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        panelContenedor.setBackground(new java.awt.Color(0, 0, 0));

        botonSiguiente2.setBackground(new java.awt.Color(255, 255, 255));
        botonSiguiente2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        botonSiguiente2.setText(">");
        botonSiguiente2.setFocusPainted(false);
        botonSiguiente2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSiguiente2ActionPerformed(evt);
            }
        });

        botonSiguiente.setBackground(new java.awt.Color(255, 255, 255));
        botonSiguiente.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        botonSiguiente.setText("<");
        botonSiguiente.setFocusPainted(false);
        botonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSiguienteActionPerformed(evt);
            }
        });

        textoDato.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        labelCampo.setBackground(new java.awt.Color(255, 255, 255));
        labelCampo.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        labelCampo.setOpaque(true);

        javax.swing.GroupLayout panelContenedorLayout = new javax.swing.GroupLayout(panelContenedor);
        panelContenedor.setLayout(panelContenedorLayout);
        panelContenedorLayout.setHorizontalGroup(
            panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonSiguiente)
                .addGap(18, 18, 18)
                .addComponent(labelCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textoDato, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonSiguiente2)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        panelContenedorLayout.setVerticalGroup(
            panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContenedorLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelContenedorLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(panelContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonSiguiente2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(labelCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textoDato, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        botonAñadir.setBackground(new java.awt.Color(0, 0, 0));
        botonAñadir.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        botonAñadir.setForeground(new java.awt.Color(255, 255, 255));
        botonAñadir.setText("+");
        botonAñadir.setFocusPainted(false);
        botonAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAñadirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonAñadir)
                .addGap(18, 18, 18)
                .addComponent(panelContenedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botonAñadir)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        eleccionOperacion.setBackground(new java.awt.Color(0, 0, 0));
        eleccionOperacion.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        eleccionOperacion.setForeground(new java.awt.Color(255, 255, 255));
        eleccionOperacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<" }));
        eleccionOperacion.setFocusable(false);

        botonEdicion.setBackground(new java.awt.Color(0, 0, 0));
        botonEdicion.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        botonEdicion.setForeground(new java.awt.Color(255, 255, 255));
        botonEdicion.setText("Modo Edición");
        botonEdicion.setFocusPainted(false);
        botonEdicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEdicionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(botonConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eleccionTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonEdicion)
                        .addGap(82, 82, 82)
                        .addComponent(eleccionCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eleccionOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(respuestaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(botonConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eleccionTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonEdicion)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonConsulta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(eleccionCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(eleccionOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(respuestaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConexionActionPerformed
        //Con este botón se realizará la conexión a la BBDD dada
        if(botonConexion.getBackground().equals(Color.red))//Si no estas conectado
        {
            int abrir = gestor.abrir_conexion();
            if(abrir == 0)
            {
                botonConexion.setBackground(Color.green);
                actualizaValores();
                desactivar(true);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Ha habido un error al conectarte", "", JOptionPane.ERROR_MESSAGE);
            }
        }
        else//Si estas conectado
        {
            int cerrar = gestor.cerrar_conexion();
            if(cerrar == 0)
            {
                botonConexion.setBackground(Color.red);
                desactivar(false);
                limpiaValores();
                limpiaTabla();
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Ha habido un error al desconectarte", "", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonConexionActionPerformed

    private void botonConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConsultaActionPerformed
        //Con este botón mandaremos la consulta
        String consulta = respuestaConsulta.getText();
        String campo = eleccionCampo.getSelectedItem().toString();
        String operacion = eleccionOperacion.getSelectedItem().toString();
        String tablaSeleccionada = eleccionTabla.getSelectedItem().toString();
        ResultSet rs = gestor.realizaConsulta(tablaSeleccionada, campo, operacion, consulta);
        limpiaTabla();
        respuestaConsulta.setText("");
        añadeDatos(rs);
    }//GEN-LAST:event_botonConsultaActionPerformed

    private void botonAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAñadirActionPerformed
        //Con este botón se abre el panel para insertar los datos o se mandan los datos para insertarlos
        if(botonAñadir.getText().equals("+"))//muestra la pestaña para añadir una fila
        {
           panelContenedor.setVisible(true);
           labelCampo.setText(tcampos[0]); 
           botonSiguiente.setEnabled(false);
           if(ncampos == 1)
           {
               botonSiguiente2.setEnabled(false);
               botonAñadir.setText("->");
           }
        }
        else//Si el usuario ha introducido todos los datos se enviarán para insertalos, si son correctos se insertará correctamente
        {
            valores[posicion] = textoDato.getText();
            String tablaSeleccionada = eleccionTabla.getSelectedItem().toString();
            int a = gestor.insertaDatos(tablaSeleccionada, tcampos, valores, ncampos);
            if(a == 0)
            {
                JOptionPane.showMessageDialog(null, "El campo se ha añadido correctamente", "", JOptionPane.PLAIN_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Ha habido un error al introducir el campo", "", JOptionPane.ERROR_MESSAGE);
            }
            botonAñadir.setText("+");
            botonSiguiente2.setEnabled(true);
            posicion = 0;
            actualizaValores();
        }
    }//GEN-LAST:event_botonAñadirActionPerformed

    private void botonSiguiente2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSiguiente2ActionPerformed
        //Con este botón se avanza para introducir el siguiente valor que quieres insertar y se guarda el valor insertado
        valores[posicion] = textoDato.getText();
        textoDato.setText("");
        posicion++;
        botonSiguiente.setEnabled(true);
        labelCampo.setText(tcampos[posicion]); 
        if(posicion == tcampos.length-1)//Si llegas al final se preparara el boton de añadir para poder mandar los datos e insertarlos
        {
            botonAñadir.setText("->");
            botonSiguiente2.setEnabled(false);
        }
    }//GEN-LAST:event_botonSiguiente2ActionPerformed

    private void botonSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSiguienteActionPerformed
        //Con este botón se va atras para introducir el anterior valor que quieres insertar
        botonSiguiente2.setEnabled(true);
        botonAñadir.setText("+");
        textoDato.setText("");
        posicion--;
        labelCampo.setText(tcampos[posicion]); 
        if(posicion == 0)
        {
            botonSiguiente.setEnabled(false);
        }    
    }//GEN-LAST:event_botonSiguienteActionPerformed

    private void botonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarActionPerformed
        //Con este botón se modifica el campo indicado.
        String tablaSeleccionada = eleccionTabla.getSelectedItem().toString();
        String campo = eleccionCampo2.getSelectedItem().toString();
        String valorAntiguo = eleccionValor.getSelectedItem().toString();
        String id = "";
        String valoresModificar[] = preparaModificaValor(valorAntiguo, id);
        String valor = textoDato2.getText();
        int a = gestor.modificaCampo(tablaSeleccionada, campo, valoresModificar[0], valor, valoresModificar[1]);
        if(a == 0)
        {
            JOptionPane.showMessageDialog(null, "Se ha modificado el campo correctamente", "", JOptionPane.PLAIN_MESSAGE);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Ha habido un error al modificar el campo", "", JOptionPane.ERROR_MESSAGE);
        }
        actualizaValores();
    }//GEN-LAST:event_botonModificarActionPerformed

    private void botonEdicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEdicionActionPerformed
        //Con este botón se abre la ventana donde se modifica la BBDD(se añaden tablas o campos)
        ventana.obtenerDatos();
        ventana.setLocationRelativeTo(this);
        ventana.setVisible(true);
        eleccionTabla.removeAllItems();
        actualizaValores();
    }//GEN-LAST:event_botonEdicionActionPerformed

    private void botonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarActionPerformed
        //Con este botón se borra la fila seleccionada
        String tabla = eleccionTabla.getSelectedItem().toString();
        String campo = eleccionCampo2.getSelectedItem().toString();
        String valor = eleccionValor.getSelectedItem().toString();
        String id = "";
        String valoresModificar[] = preparaModificaValor(valor, id);
        
        int a = gestor.borrarFila(tabla, campo, valoresModificar[0], valoresModificar[1]);
        if(a == 0)
        {
            JOptionPane.showMessageDialog(null, "Se ha borrado la fila correctamente", "", JOptionPane.PLAIN_MESSAGE);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Ha habido un error al borrar la fila", "", JOptionPane.ERROR_MESSAGE);
        }
        actualizaValores();
    }//GEN-LAST:event_botonBorrarActionPerformed

    private void tablaDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaDatosMouseClicked
        //Con este método cuando el usuario haga click en la tabla se actualizarán los valores del comboBox para modificarlos
        JTable source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        int column = source.columnAtPoint( evt.getPoint() );
        String s=source.getModel().getValueAt(row, column)+"";
        if(gestor.obtenerPK(eleccionTabla.getSelectedItem().toString()).equals(""))
        {
            eleccionCampo2.setSelectedIndex(column);
        }
        else
        {
            if(column > 0)
            {
                eleccionCampo2.setSelectedIndex(column-1);
            }
        }
        eleccionValor.setSelectedItem(s);
    }//GEN-LAST:event_tablaDatosMouseClicked
    
    public String[] preparaModificaValor(String valorAntiguo, String id) //Método que prepara el valor según lo que contenga para poder modificarlo correctamente
    {
        String valores[] = {valorAntiguo,id};
        if(valorAntiguo.contains(" - ") || valorAntiguo.length() > 3 && valorAntiguo.contains(" | "))//Con esto detecto si hay una fk o una pk, para ello debe tener minimo 3 letras
        {
            for(int i=0; i+3<valorAntiguo.length(); i++)
            {
                if(valorAntiguo.length() > 3)
                {
                    if(valorAntiguo.substring(i, i+3).equals(" | "))//Si es una primary key
                    {
                        id = valorAntiguo.substring(0, i);
                        valorAntiguo = valorAntiguo.substring(i+3);
                        i = 0;
                    }
                    else if(valorAntiguo.substring(i, i+3).equals(" - "))//Si es una foreign key
                    {
                        valorAntiguo = valorAntiguo.substring(0, i);
                        break;
                    }
                }
            }
        }
        valores[0]=valorAntiguo;
        valores[1]=id;
        return valores;
    }
    
    public void preparaTabla()//Método que prepara y añade el modelo a la tabla
    {      
        //Formación de la tabla
        String titulosCampos[] = new String [ncampos];
        for(int j=0; j < ncampos; j++)
        {
            titulosCampos[j] = tcampos[j];
        }
        String datos[][]={};
        modelo = new DefaultTableModel(datos, titulosCampos) //La tabla no se podrá editar
        {
            @Override
            public boolean isCellEditable(int row, int column) 
            {
                return false;
            }
        };   
        tablaDatos.setModel(modelo); 
    }
    
    public void actualizaValores()//Método con el que se actualizan todos los valores segun la tabla con la que trabajemos y se recogen las variables que necesitaremos
    {    
        limpiaValores();
        String titulos[] = gestor.obtenerTitulos("","tablas");
        if(eleccionTabla.getItemCount()<1)
        {
            for(int i=0; i<titulos.length; i++)
            {
                eleccionTabla.addItem(titulos[i]);
            }   
        }
        String tablaElegida = eleccionTabla.getSelectedItem().toString();
        String pk = gestor.obtenerPK(tablaElegida);
        tcampos = gestor.obtenerTitulos(tablaElegida,"campos"); 
        ncampos = gestor.obtenerNCampos(tablaElegida);      
        valores = new String[ncampos];
        if(eleccionCampo.getItemCount()<1)
        {
            eleccionCampo.addItem("*");
            for(int i=0; i < ncampos; i++)
            {               
                if(!pk.equals(tcampos[i]))
                {
                    eleccionCampo2.addItem(tcampos[i]);
                }
                eleccionCampo.addItem(tcampos[i]);
            }
        }
        actualizaEleccion();
        ResultSet rs = gestor.realizaConsulta(tablaElegida, "", "", "");
        preparaTabla();
        añadeDatos(rs);
        tablaDatos.setModel(modelo);   
    }
    
    public void añadeDatos(ResultSet rs)//Con este método se rellenará la tabla con los datos obtenidos de la consulta
    {
        String valores[] = new String[ncampos];
        try 
        {
            if(rs!=null)
            {
                while(rs.next())
                {
                    for(int i=0;i<ncampos;i++)
                    {
                        valores[i] = rs.getObject(tcampos[i])+"";
                        String fktabla = gestor.obtenerFK(eleccionTabla.getSelectedItem().toString(), tcampos[i]);
                        if(!fktabla.equals("")&&!fktabla.equals("null")&&tcampos.length>0)
                        {
                            String fkDato = obtenerDatosFK(fktabla,tcampos[i], valores[i]);
                            valores[i] = valores[i] + fkDato;
                        }
                    }                
                    modelo.addRow(valores);
                }
                rs.close();
            }
        } 
        catch (SQLException e) 
        {
            JOptionPane.showMessageDialog(null, "Ha habido un error al preparar la tabla", "", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public String obtenerDatosFK(String tablaFK, String campo ,String valor) //Con este método se añadira un dato a las foreign key para diferenciarlas 
    {
        String tablaElegida = eleccionTabla.getSelectedItem().toString();
        String pk = gestor.obtenerPK(tablaElegida);
        String pk2 = gestor.obtenerPK(tablaFK);
        int ncampos_FK = gestor.obtenerNCampos(tablaFK);
        String fkdato = "";
        if(!campo.equals(pk) && ncampos_FK > 1  || pk.equals("") && ncampos_FK > 1)
        {
            ResultSet rs = gestor.realizaConsulta(tablaFK, pk2, "", valor);
            try 
            {
                if(rs.next())
                {
                    fkdato = " - " + rs.getObject(2)+"";
                }
            } 
            catch (SQLException ex) 
            {
                Logger.getLogger(VentanaInicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return fkdato;
    }
    
    public void actualizaEleccion()//Método usado para mostrar y actualizar los campos y datos que el usuario elegira al querer modificar un dato
    {
        eleccionValor.removeAllItems();
        String tablaElegida = eleccionTabla.getSelectedItem().toString();
        String campoElegido = ""; 
        String[] eleccionValores = null;
        String[] pks = null;
        String pktabla = gestor.obtenerPK(tablaElegida);;
        String fktabla = "";
        String fkDato = "";
        
        if(eleccionCampo2.getItemCount()<1)
        {
            eleccionValores = gestor.realizaConsultaCampo(tablaElegida, tcampos[0]);
        }
        else
        {
            campoElegido = eleccionCampo2.getSelectedItem().toString(); 
            eleccionValores = gestor.realizaConsultaCampo(tablaElegida, campoElegido);
        }
        if(eleccionValor.getItemCount()<1)
        {
            for(int i=0; i < eleccionValores.length; i++)
            {
                if(eleccionValores[i].equals("null"))//Si el valor es nulo se señalizara con un guión, y dependiendo de si tiene pk o no se le añadirá
                {
                    if(!pktabla.equals("")&&tcampos.length>0)
                    {
                        if(eleccionCampo2.getItemCount()>1)
                        {
                            pks = gestor.realizaConsultaCampo(tablaElegida, pktabla);
                            eleccionValor.addItem(pks[i] + " | -"); 
                        }
                    }
                    else
                    {
                        eleccionValor.addItem("-");
                    }
                }
                else//Si el dato a mostrar es una fk se le añadirá el primer dato de la tabla a la q hace referencia con un guion
                    //Si el dato a mostrar tiene pk, se le añadirá por delante de este con un | para diferenciarlos
                {
                    fktabla = gestor.obtenerFK(tablaElegida, tcampos[0]);
                    if(eleccionCampo2.getItemCount()>1)
                    {
                        fktabla = gestor.obtenerFK(tablaElegida, campoElegido);                                             
                    }
                    if(!fktabla.equals("")&&tcampos.length>0)
                    {
                        fkDato = obtenerDatosFK(fktabla, tcampos[0], eleccionValores[i]);
                        if(eleccionCampo2.getItemCount()>1)
                        {
                            fkDato = obtenerDatosFK(fktabla,campoElegido, eleccionValores[i]);
                        }
                        eleccionValores[i] = eleccionValores[i] + fkDato; 
                    }
                    if(!pktabla.equals("")&&tcampos.length>0)
                    {
                        if(eleccionCampo2.getItemCount()>1)
                        {
                            pks = gestor.realizaConsultaCampo(tablaElegida, pktabla);
                            eleccionValores[i] = pks[i] + " | " + eleccionValores[i]; 
                        }
                    }
                    eleccionValor.addItem(eleccionValores[i]);
                }
            }
        }        
    }
    
    public void limpiaValores()//Método con el que limpio los elementos y los datos introducidos por el usuario, para que los valores se actualicen correctamente
    {
        posicion = 0;
        botonAñadir.setText("+");
        respuestaConsulta.setText("");
        textoDato.setText("");
        textoDato2.setText("");
        eleccionCampo.removeAllItems();
        eleccionCampo2.removeAllItems();
        eleccionValor.removeAllItems();
        panelContenedor.setVisible(false);
    }
    
    public void limpiaTabla()//Método con el que se eliminan todos las filas de la tabla
    {
        for (int i = 0; i < tablaDatos.getRowCount(); i++) 
        {
            modelo.removeRow(i);
            i-=1;
        }  
    }
    
    public void desactivar(Boolean a)//Método que deshabilita o habilita los botones
    {
        botonAñadir.setEnabled(a);
        botonConsulta.setEnabled(a);
        botonModificar.setEnabled(a);
        botonEdicion.setEnabled(a);
        botonSiguiente2.setEnabled(a);
        eleccionCampo2.enable(a);
        eleccionValor.enable(a);
        eleccionTabla.enable(a);
    }
    
    public static void main(String args[]) 
    {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new VentanaInicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAñadir;
    private javax.swing.JButton botonBorrar;
    private javax.swing.JButton botonConexion;
    private javax.swing.JButton botonConsulta;
    private javax.swing.JButton botonEdicion;
    private javax.swing.JButton botonModificar;
    private javax.swing.JButton botonSiguiente;
    private javax.swing.JButton botonSiguiente2;
    private javax.swing.JComboBox<String> eleccionCampo;
    private javax.swing.JComboBox<String> eleccionCampo2;
    private javax.swing.JComboBox<String> eleccionOperacion;
    private javax.swing.JComboBox<String> eleccionTabla;
    private javax.swing.JComboBox<String> eleccionValor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCampo;
    private javax.swing.JPanel panelContenedor;
    private javax.swing.JTextField respuestaConsulta;
    private javax.swing.JTable tablaDatos;
    private javax.swing.JTextField textoDato;
    private javax.swing.JTextField textoDato2;
    // End of variables declaration//GEN-END:variables
}
